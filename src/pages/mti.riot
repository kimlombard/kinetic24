<mti>
  <h1><a href="https://mirrortradinginternational.com/overview/">Mirror Trading International</a></h1>
  
  <p>Mirror Trading Internastional (MTI) is a trading company incorporated in South Africa that has been trading since April 2019.</p>

  <p>The company's objective is to grow your Bitcoin. You deposit BTC into your private wallet on MTI's side and they grow your balance by trading in both crypto and forex markets every working day of the week. Daily profits are automatically added to your balance and therefore you earn compound interest daily. As long as the daily trades end in a profit, you continue to grow your investment.</p>

  <p>The minimum deposit requirement is 100 USD, where 200 USD is suggested if you are interested in the referral program, since that automatically qualifies you for various weekly bonuses.</p>

  <p>Below are some charts that indicate the performance potential using actual trading results.</p>

  <p>Note that while the company has been trading since around April 2019, results are only available from 7 November 2019, as per their daily trading announcements on Telegram. Also, you will notice that there is a dip in results during December, which is due to fewer trading days during holiday season. Of particular interest is how the company has performed during the COVID-19 pandemic, posting only one day of negative trading.</p>

  <div class="chart">
    <h3>Daily Results</h3>
    <p class="stats" id="daily-results-stats"></p>
    <canvas id="daily-results"></canvas>
  </div>

  <div class="chart">
    <h3>2-Day Moving Average</h3>
    <p class="stats" id="2-day-moving-average-stats"></p>
    <canvas id="2-day-moving-average"></canvas>
  </div>

  <div class="chart">
    <h3>3-Day Moving Average</h3>
    <p class="stats" id="3-day-moving-average-stats"></p>
    <canvas id="3-day-moving-average"></canvas>
  </div>

  <div class="chart">
    <h3>Weekly Results</h3>
    <p class="stats" id="weekly-results-stats"></p>
    <canvas id="weekly-results"></canvas>
  </div>

  <div class="chart">
    <h3>2-Week Moving Average</h3>
    <p class="stats" id="2-week-moving-average-stats"></p>
    <canvas id="2-week-moving-average"></canvas>
  </div>

  <div class="chart">
    <h3>3-Week Moving Average</h3>
    <p class="stats" id="3-week-moving-average-stats"></p>
    <canvas id="3-week-moving-average"></canvas>
  </div>

  <div class="chart">
    <h3>Monthly Results</h3>
    <p class="stats" id="monthly-results-stats"></p>
    <canvas id="monthly-results"></canvas>
  </div>

  <div class="chart">
    <h3>2-Month Moving Average</h3>
    <p class="stats" id="2-month-moving-average-stats"></p>
    <canvas id="2-month-moving-average"></canvas>
  </div>

  <div class="chart">
    <h3>3-Month Moving Average</h3>
    <p class="stats" id="3-month-moving-average-stats"></p>
    <canvas id="3-month-moving-average"></canvas>
  </div>

  <style>
    .stats {
      font-size: small;
    }

    .chart {
      padding-top: 50px;
    }
  </style>

  <script>
    import moment from 'moment'
    import * as ss from 'simple-statistics'
    import Chart from 'chart.js'

    $(document).ready(function() {
      $.getJSON('src/data/daily-data.json', function(data) {
        let stats = calculateStats(data)
				let ctx = '#daily-results'
        $('#daily-results-stats').html(statsForNerds(data, stats))
        drawChart(data, stats, ctx, 'Daily Results')

        let movingAverageData = calculateMovingAverage(data, 2)
        stats = calculateStats(movingAverageData)
        ctx = '#2-day-moving-average'
        $('#2-day-moving-average-stats').html(statsForNerds(data, stats))
        drawChart(movingAverageData, stats, ctx, '2-Day Moving Average')

        movingAverageData = calculateMovingAverage(data, 3)
        stats = calculateStats(movingAverageData)
        ctx = '#3-day-moving-average'
        $('#3-day-moving-average-stats').html(statsForNerds(data, stats))
        drawChart(movingAverageData, stats, ctx, '3-Day Moving Average')
      })
      $.getJSON('src/data/weekly-data.json', function(data) {
        let stats = calculateStats(data)
        let ctx = '#weekly-results'
        $('#weekly-results-stats').html(statsForNerds(data, stats))
        drawChart(data, stats, ctx, 'Weekly Results')

        let movingAverageData = calculateMovingAverage(data, 2)
        stats = calculateStats(movingAverageData)
        ctx = '#2-week-moving-average'
        $('#2-week-moving-average-stats').html(statsForNerds(data, stats))
        drawChart(movingAverageData, stats, ctx, '2-Week Moving Average')

        movingAverageData = calculateMovingAverage(data, 3)
        stats = calculateStats(movingAverageData)
        ctx = '#3-week-moving-average'
        $('#3-week-moving-average-stats').html(statsForNerds(data, stats))
        drawChart(movingAverageData, stats, ctx, '3-Week Moving Average')
      })
      $.getJSON('src/data/monthly-data.json', function(data) {
        let stats = calculateStats(data, 3)
        let ctx = '#monthly-results'
        $('#monthly-results-stats').html(statsForNerds(data, stats))
        drawChart(data, stats, ctx, 'Monthly Results')

        let movingAverageData = calculateMovingAverage(data, 2)
        stats = calculateStats(movingAverageData)
        ctx = '#2-month-moving-average'
        $('#2-month-moving-average-stats').html(statsForNerds(data, stats))
        drawChart(movingAverageData, stats, ctx, '2-Month Moving Average')

        movingAverageData = calculateMovingAverage(data, 3)
        stats = calculateStats(movingAverageData)
        ctx = '#3-month-moving-average'
        $('#3-month-moving-average-stats').html(statsForNerds(data, stats))
        drawChart(movingAverageData, stats, ctx, '3-Month Moving Average')
      })      
    })

    function logData(data) {
      data.forEach(item => console.log("date: " + item.date + ", value: " + item.value))
    }

    function calculateStats(data) {
      let values = []
      data.forEach(item => values.push(item.value))

      let min = ss.min(values)
      let max = ss.max(values)
      let mean = ss.mean(values)
      let variance = ss.variance(values)
      let standardDeviation = ss.standardDeviation(values)
      let sd1_LowerValue = mean - standardDeviation
      let sd1_UpperValue = mean + standardDeviation
      let sd2_LowerValue = mean - (standardDeviation * 2)
      let sd2_UpperValue = mean + (standardDeviation * 2)

      // console.log("min: " + min)
      // console.log("max: " + max)
      // console.log("mean: " + mean)
      // console.log("variance: " + variance)
      // console.log("standard deviation: " + standardDeviation)

      return {min, max, mean, variance, standardDeviation, sd1_LowerValue, sd1_UpperValue, sd2_LowerValue, sd2_UpperValue}
    }

    function calculateMovingAverage(array, numberOfDays) {
      let total = 0
      let average = 0
      let outArray = []

      for (let index = 0; index < array.length; index++) {
        total = total + array[index].value

        if ((index + 1) % numberOfDays == 0) {

          average = total / numberOfDays
          outArray.push({date: array[index].date, value: average})
          total = 0
        }
      }

      return outArray
    }

    function statsForNerds(data, stats) {
      let html = `
        <table>
          <caption><b>Stats for Nerds</b></caption>
          <thead>
            <tr>
              <th></th>
              <th></th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>min: ${stats.min.toFixed(4)}</td>
              <td>mean: ${stats.mean.toFixed(4)}</td>
              <td>max: ${stats.max.toFixed(4)}</td>
            </tr>
            <tr>
              <td>variance: ${stats.variance.toFixed(4)}</td>
              <td colspan="2">standard deviation: ${stats.standardDeviation.toFixed(4)}</td>
            </tr>
            <tr>
              <td>standard deviation 68% (lower): ${stats.sd1_LowerValue.toFixed(4)}</td>
              <td colspan="2">standard deviation 68% (upper): ${stats.sd1_UpperValue.toFixed(4)}</td>
            </tr>
            <tr>
              <td>standard deviation 95% (lower): ${stats.sd2_LowerValue.toFixed(4)}</td>
              <td colspan="2">standard deviation 95% (upper): ${stats.sd2_UpperValue.toFixed(4)}</td>
            </tr>
          </tbody>
        </table>`

        return html
    }

    function drawChart(data, stats, ctxID, label) {
      let labels = []
      let values = []
      let meanValues = []
      let sd1_UpperValues = [], sd1_LowerValues = []
      let sd2_UpperValues = [], sd2_LowerValues = []
      let sd1_UpperValue, sd1_LowerValue
      let sd2_UpperValue, sd2_LowerValue

      const chartColors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(201, 203, 207)'
      }

      sd1_UpperValue = stats.mean + stats.standardDeviation
      sd1_LowerValue = stats.mean - stats.standardDeviation
      sd2_UpperValue = stats.mean + (stats.standardDeviation * 2)
      sd2_LowerValue = stats.mean - (stats.standardDeviation * 2)

      data.forEach((item) => {
        labels.push(item.date)
        values.push(item.value.toFixed(4))
      })

      values.forEach(() => {
        meanValues.push(stats.mean.toFixed(4))

        sd1_UpperValues.push(sd1_UpperValue.toFixed(4))
        sd1_LowerValues.push(sd1_LowerValue.toFixed(4))

        sd2_UpperValues.push(sd2_UpperValue.toFixed(4))
        sd2_LowerValues.push(sd2_LowerValue.toFixed(4))
      })

      // let ctx = $('#daily-results')
      let ctx = $(ctxID)
      
      const config = {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: label,
            backgroundColor: chartColors.red,
            borderColor: chartColors.red,
            fill: false,
            data: values
          }, {
            label: 'Mean',
            backgroundColor: chartColors.grey,
            borderColor: chartColors.grey,
            borderWidth: 3,
            fill: false,
            data: meanValues
          }, {
            label: 'Standard Deviation 68% (Upper)',
            backgroundColor: chartColors.blue,
            borderColor: chartColors.blue,
            borderWidth: 3,
            fill: false,
            data: sd1_UpperValues
          }, {
            label: 'Standard Deviation 68% (Lower)',
            backgroundColor: chartColors.blue,
            borderColor: chartColors.blue,
            borderWidth: 3,
            fill: false,
            data: sd1_LowerValues
          }, {
            label: 'Standard Deviation 95% (Upper)',
            backgroundColor: chartColors.purple,
            borderColor: chartColors.purple,
            borderWidth: 3,
            fill: false,
            data: sd2_UpperValues
          }, {
            label: 'Standard Deviation 95% (Lower)',
            backgroundColor: chartColors.purple,
            borderColor: chartColors.purple,
            borderWidth: 3,
            fill: false,
            data: sd2_LowerValues
          }],
        },
        options: {
          responsive: true
        }
      }

      let myChart = new Chart(ctx, config)
      // window.myChart = new Chart(ctx, config)
      // return myChart
    }
  </script>
</mti>
